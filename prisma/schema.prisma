// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
}

model OnboardingData {
  id                 Int      @id @default(autoincrement())
  userId             String   @unique // ðŸ‘ˆ make this unique
  dietaryPreference  String
  goal               String
  householdSize      Int
  cuisinePreferences String[]
}




model MealPlan {
  id          String      @id @default(cuid())
  title       String
  userId      String      // Clerk user ID
  duration    Int
  mealsPerDay Int
  days        DayMeal[]   // One-to-many: each meal plan has many days
  createdAt   DateTime    @default(now())
  coverImageUrl String?   // Cover image for the meal plan
}


model DayMeal {
  id         String   @id @default(cuid())
  date       DateTime
  meals      Meal[]
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
}

model Meal {
  id         String   @id @default(cuid())
  name       String
  type       String
  isLiked   Boolean   @default(false)
  imageUrl String?
  description String
  ingredients String[]
  instructions String @default("")
  calories   Int
  dayMeal    DayMeal @relation(fields: [dayMealId], references: [id])
  dayMealId  String
  favorites  FavoriteRecipe[] // Relation to favorite recipes
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String   // Clerk user ID
  mealId    String   // Reference to the meal
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, mealId]) // Prevent duplicate favorites
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Subscription      subscription?
  twoFactorEnabled Boolean   @default(false)
  Session          Session[]
  Account          Account[]
  
  // New fields for user location
  country          String? // Stored user's country
  city             String? // Stored user's city
  currencyCode     String? // Stored user's currency code
  currencySymbol   String? // Stored user's currency symbol

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isOnboardingComplete Boolean @default(false)
  isPro Boolean @default(false)


  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}



model subscription {
  id                String   @id @default(uuid())
  userID            String   @unique
  CustomerID        String   @unique
  plan              String   @default("free") // "free", "pro", "enterprise"
  status            String   @default("active") // "active", "canceled", "past_due", "incomplete", "trialing"
  currentPeriodEnd  DateTime @default(dbgenerated("NOW() + INTERVAL '1 year'"))
  features          String[] @default([]) // Array of feature IDs
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model mealPlanGeneration {
  id              String   @id @default(cuid())
  userId          String   // User ID
  weekStart       DateTime // Start of the week (Sunday)
  generationCount Int      @default(0) // Number of generations this week
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, weekStart]) // One record per user per week
  @@map("meal_plan_generation") // Explicit table name
}

model MealSwapCount {
  id          String   @id @default(cuid())
  userId      String
  weekStart   DateTime
  swapCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, weekStart])
}